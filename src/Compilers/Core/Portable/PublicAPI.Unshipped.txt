Microsoft.CodeAnalysis.CommandLineArguments.ManifestResourceArguments.get -> System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CommandLineResource>
Microsoft.CodeAnalysis.CommandLineResource
Microsoft.CodeAnalysis.CommandLineResource.CommandLineResource() -> void
Microsoft.CodeAnalysis.CommandLineResource.FullPath.get -> string!
Microsoft.CodeAnalysis.CommandLineResource.IsEmbedded.get -> bool
Microsoft.CodeAnalysis.CommandLineResource.IsLinked.get -> bool
Microsoft.CodeAnalysis.CommandLineResource.IsPublic.get -> bool
Microsoft.CodeAnalysis.CommandLineResource.LinkedResourceFileName.get -> string?
Microsoft.CodeAnalysis.CommandLineResource.ResourceName.get -> string!
Microsoft.CodeAnalysis.Compilation.EmitDifference(Microsoft.CodeAnalysis.Emit.EmitBaseline! baseline, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Emit.SemanticEdit>! edits, System.Func<Microsoft.CodeAnalysis.ISymbol!, bool>! isAddedSymbol, System.IO.Stream! metadataStream, System.IO.Stream! ilStream, System.IO.Stream! pdbStream, Microsoft.CodeAnalysis.Emit.EmitDifferenceOptions options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Microsoft.CodeAnalysis.Emit.EmitDifferenceResult!
Microsoft.CodeAnalysis.Emit.EmitDifferenceOptions
Microsoft.CodeAnalysis.Emit.EmitDifferenceOptions.EmitDifferenceOptions() -> void
Microsoft.CodeAnalysis.Emit.EmitDifferenceOptions.EmitFieldRva.get -> bool
Microsoft.CodeAnalysis.Emit.EmitDifferenceOptions.EmitFieldRva.init -> void
Microsoft.CodeAnalysis.IMethodSymbol.IsIterator.get -> bool
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.Add(TKey key, TValue? value) -> void
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.ContainsKey(TKey key) -> bool
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.Count.get -> int
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.Dispose() -> void
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.Enumerator
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.Enumerator.Current.get -> (TKey Key, TValue? Value)
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.Enumerator.Dispose() -> void
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.Enumerator.Enumerator() -> void
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.Enumerator.Enumerator(in Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue> dictionary) -> void
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.GetEnumerator() -> Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.Enumerator
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.PooledHybridDictionary() -> void
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.Remove(TKey key) -> void
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.this[TKey key].get -> TValue?
Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.this[TKey key].set -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>
Microsoft.CodeAnalysis.SmallDictionary<K, V>.Add(K key, V value) -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.ContainsKey(K key) -> bool
Microsoft.CodeAnalysis.SmallDictionary<K, V>.EnumerableImpl
Microsoft.CodeAnalysis.SmallDictionary<K, V>.EnumerableImpl.EnumerableImpl(Microsoft.CodeAnalysis.SmallDictionary<K, V>.Enumerator e) -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.Enumerator
Microsoft.CodeAnalysis.SmallDictionary<K, V>.Enumerator.Current.get -> System.Collections.Generic.KeyValuePair<K, V>
Microsoft.CodeAnalysis.SmallDictionary<K, V>.Enumerator.Enumerator() -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.Enumerator.Enumerator(Microsoft.CodeAnalysis.SmallDictionary<K, V>! dict) -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.SmallDictionary<K, V>.GetEnumerator() -> Microsoft.CodeAnalysis.SmallDictionary<K, V>.Enumerator
Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection
Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection.EnumerableImpl
Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection.EnumerableImpl.EnumerableImpl(Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection.Enumerator e) -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection.Enumerator
Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection.Enumerator.Current.get -> K
Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection.Enumerator.Enumerator() -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection.Enumerator.Enumerator(Microsoft.CodeAnalysis.SmallDictionary<K, V>! dict) -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection.GetEnumerator() -> Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection.Enumerator
Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection.KeyCollection() -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection.KeyCollection(Microsoft.CodeAnalysis.SmallDictionary<K, V>! dict) -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.Keys.get -> Microsoft.CodeAnalysis.SmallDictionary<K, V>.KeyCollection
Microsoft.CodeAnalysis.SmallDictionary<K, V>.SmallDictionary() -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.SmallDictionary(Microsoft.CodeAnalysis.SmallDictionary<K, V>! other, System.Collections.Generic.IEqualityComparer<K>! comparer) -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.SmallDictionary(System.Collections.Generic.IEqualityComparer<K>! comparer) -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.this[K key].get -> V
Microsoft.CodeAnalysis.SmallDictionary<K, V>.this[K key].set -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.TryGetValue(K key, out V value) -> bool
Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection
Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection.EnumerableImpl
Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection.EnumerableImpl.EnumerableImpl(Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection.Enumerator e) -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection.Enumerator
Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection.Enumerator.Current.get -> V
Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection.Enumerator.Enumerator() -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection.Enumerator.Enumerator(Microsoft.CodeAnalysis.SmallDictionary<K, V>! dict) -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection.Enumerator.MoveNext() -> bool
Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection.GetEnumerator() -> Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection.Enumerator
Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection.ValueCollection() -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection.ValueCollection(Microsoft.CodeAnalysis.SmallDictionary<K, V>! dict) -> void
Microsoft.CodeAnalysis.SmallDictionary<K, V>.Values.get -> Microsoft.CodeAnalysis.SmallDictionary<K, V>.ValueCollection
readonly Microsoft.CodeAnalysis.PooledHybridDictionary<TKey, TValue>.KeyComparer -> System.Collections.Generic.IEqualityComparer<TKey>!
readonly Microsoft.CodeAnalysis.SmallDictionary<K, V>.Comparer -> System.Collections.Generic.IEqualityComparer<K>!
static readonly Microsoft.CodeAnalysis.Emit.EmitDifferenceOptions.Default -> Microsoft.CodeAnalysis.Emit.EmitDifferenceOptions
Microsoft.CodeAnalysis.IEventSymbol.IsPartialDefinition.get -> bool
Microsoft.CodeAnalysis.IEventSymbol.PartialDefinitionPart.get -> Microsoft.CodeAnalysis.IEventSymbol?
Microsoft.CodeAnalysis.IEventSymbol.PartialImplementationPart.get -> Microsoft.CodeAnalysis.IEventSymbol?
Microsoft.CodeAnalysis.IncrementalGeneratorPostInitializationContext.AddEmbeddedAttributeDefinition() -> void
override Microsoft.CodeAnalysis.Diagnostics.AnalyzerFileReference.ToString() -> string!
Microsoft.CodeAnalysis.ITypeSymbol.IsExtension.get -> bool
Microsoft.CodeAnalysis.TypeKind.Extension = 14 -> Microsoft.CodeAnalysis.TypeKind
Microsoft.CodeAnalysis.ITypeSymbol.ExtensionParameter.get -> Microsoft.CodeAnalysis.IParameterSymbol?
const Microsoft.CodeAnalysis.WellKnownMemberNames.AdditionAssignmentOperatorName = "op_AdditionAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.BitwiseAndAssignmentOperatorName = "op_BitwiseAndAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.BitwiseOrAssignmentOperatorName = "op_BitwiseOrAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedAdditionAssignmentOperatorName = "op_CheckedAdditionAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedDivisionAssignmentOperatorName = "op_CheckedDivisionAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedMultiplicationAssignmentOperatorName = "op_CheckedMultiplicationAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedSubtractionAssignmentOperatorName = "op_CheckedSubtractionAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.DivisionAssignmentOperatorName = "op_DivisionAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.ExclusiveOrAssignmentOperatorName = "op_ExclusiveOrAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.LeftShiftAssignmentOperatorName = "op_LeftShiftAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.ModulusAssignmentOperatorName = "op_ModulusAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.MultiplicationAssignmentOperatorName = "op_MultiplicationAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.RightShiftAssignmentOperatorName = "op_RightShiftAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.SubtractionAssignmentOperatorName = "op_SubtractionAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.UnsignedRightShiftAssignmentOperatorName = "op_UnsignedRightShiftAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedDecrementAssignmentOperatorName = "op_CheckedDecrementAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.CheckedIncrementAssignmentOperatorName = "op_CheckedIncrementAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.DecrementAssignmentOperatorName = "op_DecrementAssignment" -> string!
const Microsoft.CodeAnalysis.WellKnownMemberNames.IncrementAssignmentOperatorName = "op_IncrementAssignment" -> string!
static readonly Microsoft.CodeAnalysis.SmallDictionary<K, V>.Empty -> Microsoft.CodeAnalysis.SmallDictionary<K, V>!
